#+title: emacs-config
#+author: Pedro Ã‚ngelo
#+date: 2023-09-07

My personal literate emacs configuration.

Notice that this file serves as my emacs configuration file, but also as a sort of repository for code I've collected.
Hence, you'll see many commented pieces of code.
These are configurations which I choose not to use, but still wish to keep around.

* Core

** Garbage Collection 
Emacs has a ridiculously low garbage collection threshold.
The default value of ~gc-cons-threshold~ is 800 000 bytes, which amounts to less than 1 MB.
While garbage collection is not automatically performed once the thresholds, given by ~gc-cons-percentage~ or ~gc-cons-threshold~, are reached, it may happen at any moment.
Hence, its possible for garbage collection to be triggered several times in a short time.
This means constant waiting periods before garbage collection is finalised.

To fix these issues, we're increase the threshold and also force garbage collection when on idle.
#+begin_src emacs-lisp
;; set threshold for garbage collection at 100MB
(setq gc-cons-threshold  (* 100 1024 1024))
;; trigger garbage collection 4 seconds after emacs goes idle
(run-with-idle-timer 4 t (lambda () (garbage-collect)))
#+end_src


** Configurations
The standard Emacs configuration clutters the filesystem with extra files, leaving backups, autosaves and lockfiles everywhere.
I prefer to keep my filesystem more tidy, hence I neatly store backups and autosaves in a single location.
I also disable lockfiles: there's no need for them since there's only one user at a time.
#+begin_src emacs-lisp
  ;; enable automatic backups
  (setq make-backup-files t)
  ;; save backup files in a specific folder (created automatically) to avoid cluttering
  (setq backup-directory-alist
        `((".*" . ,(expand-file-name "emacs-backups/" temporary-file-directory))))

  ;; backup files by copying
  ;; (setq backup-by-copying t)
  ;; backup symlinks by copying
  ;; (setq backup-by-copying-when-linked t)

  ;; enable automatic autosaves
  (setq auto-save-default t)
  ;; specify the regularity of autosaves
  (setq auto-save-interval 20)
  ;; unless autosaves directory exists, create it
  (unless (file-exists-p (expand-file-name "emacs-autosaves/" temporary-file-directory))
    (make-directory (expand-file-name "emacs-autosaves/" temporary-file-directory)))
  ;; save autosave files in a specific folder, to avoid cluttering
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name "emacs-autosaves/" temporary-file-directory) t)))

  ;; do not lock files
  (setq create-lockfiles nil)
#+end_src

Set global configuration variables:
#+begin_src emacs-lisp
;; display both current line and collumn numbers for pointer
(setq column-number-mode t)
(setq line-number-mode t)

;; ;; display thin cursor
;; (setq-default cursor-type 'bar)

;; ;; display line numbers relative to current cursor line
;; (setq display-line-numbers-type 'relative)

;; use spaces for indentation instead of tabs
(setq-default indent-tabs-mode nil)

;; ;; Do not show the startup screen.
;; (setq inhibit-startup-message t)

;; kill the whole line, including newline, if at collumn zero
;; kill up to newline if not at collumn zero
(setq kill-whole-line t)

;; Save existing clipboard text into the kill ring before replacing it.
(setq save-interprogram-paste-before-kill t)

;; do no save duplicate entries into kill ring
(setq kill-do-not-save-duplicates t)

;; default tab width set to 2 spaces
(setq-default tab-width 2)

;; wrap text at words (doesn't treat as having a newline at the end)
(setq-default word-wrap t)

;; place custom-set-variables and custom-set-faces into their own file
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
(load custom-file))
#+end_src

Enable / disable modes:
#+begin_src emacs-lisp
;; ;; save previous emacs session
;; (desktop-save-mode 1)

;; disable electric-indent-mode
(electric-indent-mode -1)

;; update buffer when file changes on disk
(global-auto-revert-mode 1)

;; display line numbers
(global-display-line-numbers-mode t)

;; highlight current line
(global-hl-line-mode t)

;; ;; wrap text at words (treats as having a newline at the end)
;; (global-visual-line-mode t)

;; do not display menu bar, tool bar and scroll bar
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; remember and restore the last cursor location of opened files
(save-place-mode 1)

;; display matching parenthesis
(show-paren-mode 1)
#+end_src

Customise key bindings:
#+begin_src emacs-lisp
;; unset key bind to suspend emacs
(when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))
#+end_src

** Utilities
Custom functions:
#+begin_src emacs-lisp
(defun file-to-string (file)
  "Read file contents and return as string"
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))

(defun string-reset-width (string)
  "Remove all newline characters from string, effectively adjusting the width to
  size of string"
  (replace-regexp-in-string "\n" "" string))

(defun string-nth (n string)
  "Obtain char at the nth position in the string"
  (substring string n (+ n 1)))

;; (defun split-string-max-length (string max-length)
;;   "Split a string into substrings with a max length of max-length"
;;   (let ((new-string nil)
;;         (rest-string string))
;;     (let ((number-substrings (if (= 0 (mod (length string) max-length))
;;                                  (/ (length string) max-length)
;;                                (+ 1 (/ (length string) max-length)))))
;;       (progn
;;         (dotimes (number number-substrings)
;;           (progn
;;             (setq new-string (concat new-string
;;                                      (seq-take rest-string max-length) "\n"))
;;             (setq rest-string (seq-drop rest-string max-length))))
;;         new-string))))

(defun string-adjust-width (string width)
  "Adjust string width to width by moving newlines"
  (let* ((clean-string (replace-regexp-in-string "\n" "" string))
         (length-string (length clean-string))
         (number-lines (ceiling (/ (float length-string) width)))
         (partition-size (ceiling (/ (float length-string) number-lines))))
    (if (< length-string width)
        clean-string
      (string-join (seq-partition clean-string partition-size) "\n"))))

(setq personal-quote-list
      (split-string (file-to-string "~/MEGA/Hobbies e Interesses/Quotes") "\n"))
(setq personal-quote-list-formatted
      (mapcar
        (lambda (quote)
          (string-adjust-width quote (truncate (* (window-width) 0.95))))
        personal-quote-list))
#+end_src

** Package Management
*** Instalation
Setting up package and archives
#+begin_src emacs-lisp
(require 'package)

;; only needed for emacs versions prior to 27
(when (< emacs-major-version 27)
  (package-initialize))

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "https://elpa.gnu.org/packages/") t)
#+end_src

From the package ~use-package~, other packages can be installed.
Hence, ensure it is either already installed, or install it:
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (unless package-archive-contents (package-refresh-contents))
  (package-install 'use-package))
#+end_src

*** use-package
#+begin_src emacs-lisp
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (require 'use-package))

;; automatically install packages not present already
(require 'use-package-ensure)
(setq use-package-always-ensure t)

;; ;; automatically update outdated packages
;; (use-package auto-package-update
;;   :config
;;   (setq auto-package-update-delete-old-versions t)
;;   (setq auto-package-update-hide-results t)
;;   (auto-package-update-maybe))
#+end_src

*** Libraries
#+begin_src emacs-lisp
(use-package dash
  :pin gnu)

(use-package seq
  :pin gnu)

(use-package s)
#+end_src

* Interface

** Splash Screen
Configurations for the ~dashboard~ package, which replaces the splash screen with a configurable dashboard:
#+begin_src emacs-lisp
(use-package dashboard
  :init
  ;; set the title
  (setq dashboard-banner-logo-title "Emacs Dashboard")
  ;; set the banner
  (setq dashboard-startup-banner 'logo)
  ;; center content
  (setq dashboard-center-content t)
  ;; set dashboard items
  (setq dashboard-items '((bookmarks . 5)
                          (recents  . 5)))
  (use-package all-the-icons
    :if (display-graphic-p))
  ;; use all-the-icons package
  ;; don't forget to M-x all-the-icons-install-fonts
  (setq dashboard-icon-type 'all-the-icons)
  ;; add icons to the widget headings and their items
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;; show navigator below the banner
  (setq dashboard-set-navigator t)
  ;; show info about the packages loaded and the init time:
  (setq dashboard-set-init-info t)
  ;; Format: "(icon title help action face prefix suffix)"
  (setq dashboard-navigator-buttons
        `(;; line1
          ((,(all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0)
            "Reload Configs" "Reload configurations from dot files"
            (lambda (&rest _) (load-file (expand-file-name "init.el" user-emacs-directory)))
            nil "" ""))))
  (setq dashboard-footer-messages personal-quote-list-formatted)
  (setq dashboard-footer-icon (all-the-icons-faicon "quote-left"
                                                    :height 1.1
                                                    :v-adjust -0.05
                                                    :face 'font-lock-keyword-face))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Windows and Frames
Configurations for the ~zoom~ package, which automatically resizes windows according to a given ration, giving greater focus on the currently focused window:
#+begin_src emacs-lisp
(use-package zoom
  :config
  (zoom-mode t)
  ;; resize windows according to the golden ratio
  (custom-set-variables '(zoom-size '(0.618 . 0.618))))
#+end_src

** Themes
Install solarized theme:
#+begin_src emacs-lisp
(use-package solarized-theme)
#+end_src

Configurations for the ~circadian~ package, which enables automatic theme switching according to time of day:
#+begin_src emacs-lisp
(use-package circadian
  :config
  (setq calendar-latitude 41.1)
  (setq calendar-longitude -8.7)
  (setq circadian-themes '((:sunrise . solarized-light)
                           ("5:00" . solarized-light)
                           (:sunset . solarized-dark)
                           ("18:30" . solarized-dark)))
  (circadian-setup))
#+end_src

** Focus Enhancing  and Distraction Avoiding
Configurations for the ~dimmer~ package, which automatically dims all but the currently focused window:
#+begin_src emacs-lisp
(use-package dimmer
  :config
  (dimmer-mode t)
  ;; set dimmer to only apply to foreground
  (setq dimmer-adjustment-mode :foreground)
  ;; set dimmer to dim 35%
  (setq dimmer-fraction 0.35))
#+end_src

** Help
Configurations for the ~helpful~ package, which enhances standard help functions:
#+begin_src emacs-lisp
(use-package helpful
  :config
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)
  (global-set-key (kbd "C-c C-d") #'helpful-at-point))
#+end_src

* Editing

** Spell Checking
For spell checking, I use ~flyspell~ and ~aspell~.
However, ~flyspell~ didn't work out of the box, due to Flatpak's containment environment.
I installed Emacs via Snap instead and it worked.

Configurations for the ~flyspell~ package, which provides on-the-fly spell checking.
#+begin_src emacs-lisp
  (require 'flyspell)

  ;; use the aspell spell checker instead of ispell
  (setq ispell-program-name "aspell")
  ;; flyspell provides an issue message for every word it analyses
  ;; to avoid a slowdown, disable this feature
  (setq flyspell-issue-message-flag nil)

  ;; set the default dictionary to British English
  (setq ispell-dictionary "en_GB")
  ;; set the default dictionary to Portuguese
  ;; (setq ispell-dictionary "pt_PT")

  ;; enable flyspell in major modes
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  ;; run flyspell on the entire buffer after flyspell minor mode is enabled
  (add-hook 'flyspell-mode-hook #'flyspell-buffer)
#+end_src

Now that spell checking is configured, let's allow for spell checking of several languages at the same time.
For this, I'm using the ~guess-language~ package.

Configuration for the ~guess-language~ package, which automatically detects the language being typed and switches spell checker.
More info on the package [[https://github.com/tmalsburg/guess-language.el][here]].
#+begin_src emacs-lisp
  (use-package guess-language
    :ensure t
    :init
    ;; guess language in major modes
    (add-hook 'LaTeX-mode-hook #'guess-language-mode)
    (add-hook 'text-mode-hook #'guess-language-mode)
    (add-hook 'prog-mode-hook #'guess-language-mode)
    :config
    ;; guess languages between portuguese and british
    (setq guess-language-languages '(en pt))
    (setq guess-language-langcodes
          '((en . ("en_GB" "british" "ðŸ‡¬ðŸ‡§" "English"))
            (pt . ("pt_PT" "portuguese" "ðŸ‡µðŸ‡¹" "PortuguÃªs"))))
    ;; set the minimal length a paragraph needs to have before guess-language-mode changes to its language
    (setq guess-language-min-paragraph-length 35)
    ;; automatically run flyspell-buffer when languages change
    ;; (add-hook 'guess-language-after-detection-functions
    ;;           (lambda (lang beg end)
    ;;             (flyspell-region beg end)))
    )
#+end_src

Note that ~guess-language~ inspects a paragraph in order to detect language.
Hence, the texts in different languages must have at least a empty line between them.

** Text Highlight
Configurations for the ~rainbow-mode~ package, which sets the background colour of strings to match the string's colour name.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook (emacs-lisp-mode text-mode lisp-mode))
#+end_src

** Indentation
Configurations for the ~aggressive-indent~ package, which automatically inserts indentation according to the language and scope:
#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  ;; (add-to-list 'aggressive-indent-excluded-modes 'emacs-lisp-mode)
  (global-aggressive-indent-mode 1))
#+end_src

Configurations for the ~highlight-indent-guides~ package, which shown indentation guides:
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character))
#+end_src

** Auto Completion
Configurations for the ~company~ package, which provides autocompletion tooltips:
#+begin_src emacs-lisp
(use-package company
  :pin gnu
  :config
  ;; (setq company-idle-delay nil)
  (setq company-dabbrev-downcase nil)
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** Text Folding
Configurations for the ~origami~ package, which allows code blocks to be folded:
#+begin_src emacs-lisp
(use-package origami
  :requires (dash s)
  :config
  (global-origami-mode))
#+end_src

* Languages

** Haskell
Configurations for the ~haskell-mode~ package, which provides Haskell keyword highlighting:
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src

** Markdown
Configurations for the ~markdown-mode~ package, which provides markdown keyword highlighting:
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("TODO\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+end_src

** Latex
#+begin_src emacs-lisp
;; show whitespaces as dots
;; (add-hook 'latex-mode-hook 'whitespace-mode)
#+end_src

* Miscellaneous

** Org-mode
#+begin_src emacs-lisp
;; prevent truncating lines in org mode; similar to word-wrap
(setq org-startup-truncated nil)

;; open files with unfolded headings
(setq org-startup-folded nil)
#+end_src

** Whisper
Configurations for the whisper speech-to-text engine:
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "packages/whisper" user-emacs-directory))

(use-package whisper
  :load-path "~/.emacs.d/packages/whisper"
  :bind ("C-H-r" . whisper-run)
  :config
  (setq whisper-install-directory "~/.local/lib"
        whisper-language "en"
        whisper-model "base" ;; model options: tiny, base, small, medium, large
        whisper-translate nil
        whisper-enable-speed-up nil))
#+end_src
